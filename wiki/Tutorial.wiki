= Introduction =

This document tries to show some basic usage of flickr_api.

= Authentication =

Authentication process requires several steps which are handled by the 'AuthHandler' object:

  # create the authentication object.
  # you can optinnally give a callback url which is the url to which the user will be redirected after the authorisations have been granted (default corresponds to the 'flickr.test.echo' method of the Flickr API).
{{{
>>> a = flickr_api.AuthHandler(callback = a_call_back_url)
}}}
  # go to the authorization url and get the verifier code. 'needed_perms' correspond to the level of permissions to obtain it can be "read","write" or "delete" (default is "read"):
{{{ 
>>> a.get_authorization_url(needed_perms)
'http://www.flickr.com/services/oauth/authorize?oauth_token=xxxx-xxxx&perms=needed_perms'
}}} 
  # set the verifier, which corresponds to the value of the "oauth_verifier" attribute sent as a query to the callback url:
{{{
>>> a.set_verifier("xxxx")
}}}
  # set the authorization handler for the session:
{{{
>>> flickr_api.set_authorization_handler(a)
}}}

The authorization handler can be saved and loaded to a file:
{{{
>>> a.save(filename)
>>> a = flickr_api.AuthHandler.load(filename)
}}}


= Direct API methods calls =

It is also possible to directly call the api methods using an intuitive syntax. In this case the output is the raw output from the server :

{{{
>>> from flickr_api.api import flickr
>>> print flickr.reflection.getMethodInfo(method_name = "flickr.photos.getInfo")
}}}
{{{
<?xml version="1.0" encoding="utf-8" ?>
<rsp stat="ok">
<method name="flickr.photos.getInfo" needslogin="0" needssigning="0" requiredperms="0">
	<description>Get information about a photo. The calling user must have permission to view the photo.</description>
	<response>...</response>
	<explanation>...</explanation>
</method>
<arguments>
	<argument name="api_key" optional="0">Your API application key. &lt;a href=&quot;/services/api/misc.api_keys.html&quot;&gt;See here&lt;/a&gt; for more details.</argument>
        ...
</arguments>
<errors>
	<error code="1" message="Photo not found.">The photo id was either invalid or was for a photo not viewable by the calling user.</error>
	...
</errors>
</rsp>
}}}

= Object Oriented interface usage =
== Retrieving a user ==

To have direct access to user you have 3 methods
 # by username
{{{
>>> user = flickr_api.Person.findByUsername(username)
}}}
 # by email
{{{
>>> user = flickr_api.Person.findByUsername(username)
}}}
 # If an authentication handlier is set, you can retrieve the authenticated user with  :
{{{
>>> user = flickr_api.test.login()
}}}

== Managing Photos ==

 * Get photos from a user
{{{
>>> photos,resp_infos = user.getPhotos()       # if authenticated
>>> photos,resp_infos = user.getPublicPhotos() # otherwise
}}}
 * Download a photo 
{{{
>>> p.save(filename, size_label = 'Medium 640') # downloading the photo file
}}}
 * Upload a photo
{{{
>>> flickr_api.upload(photo = photo_object, title = "My title")
}}}
 * Add/Delete a comment
{{{
>>> comment = photo.addComment(comment_text = "A comment") # adding a comment
>>> comment.delete() # deleting the comment
}}}
 * Retrieve the comments
{{{
>>> comments = photo.getComments()
>>> for comment in comments : print comment.text
}}}

== Managing Photosets (aka Albums) ==
 * Get the photosets of a user
{{{
>>> photosets = user.getPhotosets()
}}}
 * Create a photoset
{{{
>>> photoset = flickr_api.Photoset.create(title = "The title of the photoset", primary_photo = cover_photo)
}}}
 * Delete a photoset
{{{
>>> photoset.delete()
}}}
 * Get the photos of a photoset
{{{
>>> photos = photoset.getPhotos()
}}}
 * Add a photo to a set
{{{
>>> photoset.addPhoto(photo = a_photo)
}}}
 * Add a comment to a photoset
{{{
>>> photoset.addComment(comment_text = "the text of the comment...")
}}}